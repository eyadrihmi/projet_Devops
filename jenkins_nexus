pipeline {
    agent any
     environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.29.12.42:8081"
        NEXUS_REPOSITORY = "demoapp-release"
        NEXUS_CREDENTIAL_ID = ""
            }

    
 stages{

    stage('GIT') { 
        steps{
        git url:'https://github.com/eyadrihmi/projet_Devops.git'
             }
    }
    
     stage('UNIT Testing'){

            steps{
                sh 'mvn test'
            }
        }
        
        stage('Integration testing'){

            steps{
                sh 'mvn verify -DskipUnitTests'
            }
        }

        stage('Maven Build'){

            steps{
                sh 'mvn clean install'
            }
        }
        
    stage("Runing Tests with Mockito & JUNIT TEST") {
               steps{
                   sh 'mvn test'
                }
        }
        
    stage('SonarQube analysis'){

            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'sonar-api') {
                        sh 'mvn clean package sonar:sonar'
                }
                }  
            }
        }
   
    stage('MAVEN Nexus'){
        steps {
        script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: 'demoapp-release',
                            credentialsId: '',
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
        }
  }}
}
